{"version":3,"sources":["Components/Tile.js","Components/Column.js","Components/Board.js","App.js","index.js"],"names":["Tile","this","props","id","chipType","onClick","chipClass","className","Component","Column","column","rows","chipPosition","onTileClick","tiles","row","tileID","push","Board","columns","columnComponents","style","backgroundColor","borderRadius","width","display","border","go","App","state","playerTurn","gameStatus","gameOver","gameWon","parseInt","split","cnt","r","setState","c","k","handleTileClick","lastEmptyTile","temp","newPlayer","newMessage","newChipPosition","handleReset","e","preventDefault","renderStatusMessage","height","padding","margin","boxSizing","cursor","textDecoration","fontFamily","fontWeight","color","textAlign","transition","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9efe8a78.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport \"./Tile.css\";\r\nexport default class Tile extends Component {\r\n    render() {\r\n        const {id,chipType,onClick} = this.props;\r\n        const chipClass= (chipType===\"Red\"? 'red chip':'blue chip');\r\n\r\n        return (\r\n            <div className=\"tile\" onClick={()=>{onClick(id)}}>\r\n                {chipType && <div className={chipClass} /> }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Tile from './Tile';\r\n\r\nexport default class Column extends Component {\r\n\r\n    render() {\r\n        const {column,rows,chipPosition,onTileClick}=this.props;\r\n        const tiles=[];\r\n        for(let row=0;row<rows;row++ )\r\n        {\r\n            const tileID= `${row}:${column}`;\r\n            const chipType = chipPosition[tileID];\r\n            tiles.push(\r\n                <Tile \r\n                    chipType={chipType}\r\n                    key={tileID}\r\n                    id={tileID}\r\n                    onClick={onTileClick}\r\n                />\r\n            )\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div  className=\"column\">\r\n                {tiles}        \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Column from './Column'\r\nexport default class Board extends Component {\r\n   \r\n    render() {\r\n        const {columns,rows,chipPosition , onTileClick} = this.props;\r\n        const columnComponents = [];\r\n        for(let column =0; column<columns ; column++)\r\n        {\r\n            columnComponents.push(\r\n                <Column\r\n                    key={column}\r\n                    rows={rows}\r\n                    column={column}\r\n                    chipPosition={chipPosition}\r\n                    onTileClick={onTileClick}\r\n                />\r\n                \r\n            );\r\n        }\r\n        return (\r\n            <div style={{backgroundColor:\"#3355ff\" ,\r\n                borderRadius:\"5px\",\r\n                width:\"480px\",\r\n                display:\"flex\",\r\n                border: \"3px solid black\"\r\n\r\n            }}>\r\n                {columnComponents}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/* eslint-disable eqeqeq */\nimport './App.css';\nimport React, { Component } from 'react'\nimport Board from './Components/Board';\nvar go = false;\nexport default class App extends Component {\n  \n  state={\n    columns:5,\n    rows:5,\n    chipPosition:{},\n    playerTurn:'Red',\n    gameStatus:\"Its Red's turn\",\n    gameOver:false\n  }\n\n  gameWon = (id)=>{\n    const row = parseInt(id.split(':')[0]);\n    const column = parseInt(id.split(':')[1]);\n    //check if count above and below >= 4\n    let cnt=1;\n    for(let r=row-1;r>=0;r--)\n    {\n      if(this.state.chipPosition[`${r}:${column}`] == this.state.playerTurn)\n      {\n        cnt++;\n      }\n      else{\n        break;\n      }\n    }\n    for(let r=row+1;r<this.state.rows;r++)\n    {\n      if(this.state.chipPosition[`${r}:${column}`] == this.state.playerTurn)\n      {\n        cnt++;\n      }\n      else{\n        break;\n      }\n    }\n    if(cnt>=4)\n    {\n      go=true;\n      this.setState({gameStatus:`Game over!   ${this.state.playerTurn} has won!!!` , gameOver:true});\n      return;\n    } \n\n    cnt=1;\n    for(let c=column-1;c>=0;c--)\n    {\n      if(this.state.chipPosition[`${row}:${c}`] == this.state.playerTurn)\n      {\n        cnt++;\n      }\n      else{\n        break;\n      }\n    }\n    for(let c=column+1;c<this.state.columns;c++)\n    {\n      if(this.state.chipPosition[`${row}:${c}`] == this.state.playerTurn)\n      {\n        cnt++;\n      }\n      else{\n        break;\n      }\n    }\n    if(cnt>=4)\n    {\n      go=true;\n      this.setState({gameStatus:`Game over!   ${this.state.playerTurn} has won!!!` , gameOver:true});\n      return;\n    }\n\n\n    cnt=1;\n    //upper main diagonal\n    for(let k=1; ; k++)\n    {\n      if(column + k >= this.state.columns ||  row-k<0) break;\n      if(this.state.chipPosition[`${row-k}:${column+k}`] == this.state.playerTurn)\n      {\n        cnt++;\n      }\n      else{\n        break;\n      }\n    }\n    //lower main diagonal\n    for(let k=1; ; k++)\n    {\n      if(row + k >= this.state.rows || column-k<0) break;\n      if(this.state.chipPosition[`${row+k}:${column-k}`] == this.state.playerTurn)\n      {\n        cnt++;\n      }\n      else{\n        break;\n      }\n    }\n\n    if(cnt>=4)\n    {\n      go=true;\n      this.setState({gameStatus:`Game over!   ${this.state.playerTurn} has won!!!` , gameOver:true});\n      return;\n    } \n    //upper secondary diagonal\n    cnt=1\n    for(let k=1; ; k++)\n    {\n      if(row - k <0 || column-k<0) break;\n      if(this.state.chipPosition[`${row-k}:${column-k}`] == this.state.playerTurn)\n      {\n        cnt++;\n      }\n      else{\n        break;\n      }\n    }\n    //lower secondary diagonal\n    for(let k=1; ; k++)\n    {\n      if(row + k >= this.state.rows || column+k>= this.state.columns) break;\n      if(this.state.chipPosition[`${row+k}:${column+k}`] == this.state.playerTurn)\n      {\n        cnt++;\n      }\n      else{\n        break;\n      }\n    }\n\n    if(cnt>=4)\n    {\n      go=true;\n      this.setState({gameStatus:`Game over!   ${this.state.playerTurn} has won!!!` , gameOver:true});\n      return;\n    } \n\n\n  }\n\n\n\n  handleTileClick=(id)=>{\n    if(go) return;\n    const column = parseInt(id.split(':')[1]);\n    let lastEmptyTile=-1;\n    for(let row=this.state.rows-1 ; row>-1;row--){\n      const temp = `${row}:${column}`;\n      if(!this.state.chipPosition[temp])\n      {\n        lastEmptyTile=temp;\n        break;\n      }\n    }\n      if(lastEmptyTile===-1) return;\n\n      this.gameWon(lastEmptyTile);\n\n\n\n\n      const newChipPosition ={...this.state.chipPosition , [lastEmptyTile]:this.state.playerTurn }\n      let newPlayer,newMessage;\n      if(this.state.playerTurn==\"Red\")\n      {\n        newPlayer=\"Yellow\";\n        newMessage=\"Its Yellow's turn\"; \n      }\n      else\n      {\n          newPlayer=\"Red\";\n          newMessage=\"Its Red's turn\";\n      }\n      if(this.state.gameOver ||  go) {\n        this.setState({chipPosition:newChipPosition , playerTurn:newPlayer});\n\n        return;}\n\n      this.setState({chipPosition:newChipPosition , playerTurn:newPlayer , gameStatus:newMessage});\n}\n\n\n  renderStatusMessage() {\n    const { gameStatus } = this.state;\n    return <div className=\"statusMessage\">{gameStatus}</div>;\n  }\n\n  handleReset=(e)=>{\n    e.preventDefault();\n    go=false;\n    this.setState({chipPosition:{},\n      playerTurn:'Red',\n      gameStatus:\"Its Red's turn\",\n      gameOver:false});\n  }\n  render() {\n   \n    return (\n      <div className=\"app\">\n            <Board className=\"board\" columns={this.state.columns} rows={this.state.rows} \n            chipPosition={this.state.chipPosition} onTileClick={this.handleTileClick} />\n            \n            {this.renderStatusMessage()}\n\n\n            <button onClick={this.handleReset} style={{\n            width:\"200px\",\n            height:\"30px\",\n            display:\"inline-block\",\n             padding:\"0.35em 1.2em\",\n             border:\"0.1em solid #FFFFFF\",\n             margin:\"25px 0.3em 0.3em 0\",\n             borderRadius:\"1.12em\",\n             boxSizing: \"border-box\",\n            cursor:\"pointer\",\n            backgroundColor:\"red\",\n            textDecoration:\"none\",\n            fontFamily:\"'Roboto',sans-serif\",\n            fontWeight:\"300\",\n            color:\"#FFFFFF\",\n            textAlign:\"center\",\n            transition: \"all 0.2s\",\n            }}>Click to restart the game</button>\n      </div>\n    )\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}